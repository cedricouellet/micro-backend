using ExampleConsumer.Models;
using Framework.Extensions;
using Framework.Http;
using Framework.Routing;

namespace ExampleConsumer.Routes
{
    /// <summary>
    /// An example for a route action group
    /// </summary>
    [RouteGroup(Prefix = "/api/example-items")] // All routed actions in this group are prefixed with this value
    public partial class ExampleItemsRouteGroup
    {
        /// <summary>
        /// Serves as an example in-memory data collection (instead of a traditional database)
        /// </summary>
        private readonly static List<ExampleItem> _data =
        [
            new() { Name = "Item 1" },
            new() { Name = "Item 2" },
            new() { Name = "Item 3" },
        ];

        #region HTML Endpoints
        
        /// <summary>
        /// An example routed action that returns partial HTML content for all example items, overriding the group prefix
        /// </summary>
        /// <param name="ctx">The request context</param>
        /// <returns>The response generated by the routed action</returns>
        [Route(HttpMethods.Post, Path = "/example-items/partial", IgnoreGroupPrefix = true)]
        public static Response GetListPartialHtml(RequestContext ctx)
        {
            var itemsHtml = string.Join("", _data.Select(x =>
            $"""
            <li>
                <span>{x.Name}</span>
                <button onclick="showExampleItemDetails('{x.Id}')">Ajax Alert</button>
                <button onclick="removeExampleItem('{x.Id}')">Ajax Delete</button>
                <a href="/example-items/{x.Id}/details">Details Page<a>
            </li>
            """));

            return Response.Html($"<ul>{itemsHtml}</ul>");
        }

        /// <summary>
        /// An example routed action that handles a Form POST request on the /example-items route, overriding the group prefix
        /// </summary>
        /// <param name="ctx">The request context</param>
        /// <returns>The response generated by the routed action</returns>
        [Route(HttpMethods.Post, Path = "/example-items", IgnoreGroupPrefix = true)]
        public static Response PostFormData(RequestContext ctx)
        {
            string GetErrorHtml(string innerHtml)
            {
                return $"""
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <meta charset="utf-8" />
                        <link rel="stylesheet" href="/css/styles.css" />
                        <title>Example Items - Error</title>
                    </head>
                    <body>
                        <h1>Example Items - Error</h1>
                        <br/>

                        <div>{innerHtml}</div>

                        <a href="/example-items.html">Back to Example Items</a>
                    </body>
                    </html>
                    """;
            }

            var nameParam = ctx.Request.Body.Get("name") as string;

            if (string.IsNullOrWhiteSpace(nameParam))
            {
                return Response.Html(GetErrorHtml("""<p class="error">The name is required</p>"""));
            }

            if (_data.Any(x => x.Name.Trim().Equals(nameParam.Trim(), StringComparison.CurrentCultureIgnoreCase)))
            {
                return Response.Html(GetErrorHtml("""<p class="error">An item already exists with that name</p>"""));
            }

            var item = new ExampleItem { Name = nameParam.Trim() };

            _data.Add(item);

            // we can interact with the current client's session
            ctx.Session["ExampleItems_LastCreation"] = DateTime.UtcNow.ToString();

            return Response.Redirect("example-items.html");
        }

        /// <summary>
        /// An example routed action that handles an HTTP GET request on /example-items/{id}/details, overriding the group prefix
        /// </summary>
        /// <param name="ctx">The request context</param>
        /// <returns>The response generated by the routed action</returns>
        [Route(HttpMethods.Get, Path = "/example-items/{id}/details", IgnoreGroupPrefix = true)]
        public static Response GetDetailsHtml(RequestContext ctx)
        {
            var idParam = ctx.Request.RouteParams.Get("id");

            var item = _data.SingleOrDefault(x => x.Id == idParam);

            if (item == null)
            {
                return new Response(HttpStatusCodes.NotFound404);
            }

            return Response.Html($"""
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="utf-8" />
                    <link rel="stylesheet" href="/css/styles.css" />
                    <title>Example Items - {item.Name}</title>
                </head>
                <body>
                    <h1>Example Items - {item.Name}</h1>
                    <br/>
                    <a href="/example-items.html">Back to Example Items</a>
                    <br/>
                    <ul>
                        <li>ID: {item.Id}</li>
                        <li>Name: {item.Name}</li>
                        <li>Created At (UTC): {item.CreatedAtUtc}</li>
                        <li>Random Number: {item.RandomNumber}</li>
                    </ul>
                </body>
                </html>
                """);
        }

        #endregion

        #region JSON API Endpoints

        /// <summary>
        /// An example routed API action that returns a JSON list of example items on the root path (group's prefix if present)
        /// </summary>
        /// <returns>The response generated by the routed action</returns>
        [Route(HttpMethods.Get)]
        public static Response GetListJson()
        {
            return Response.Json(HttpStatusCodes.Ok200, _data.Select(x => new 
            {
                id = x.Id,
                name = x.Name,
            }));
        }

        /// <summary>
        /// An example routed API action that retrieves an example item by its ID then returns it as JSON
        /// </summary>
        /// <param name="ctx">The request context</param>
        /// <returns>The response generated by the routed action</returns>
        [Route(HttpMethods.Get, Path = "{id}")]
        public static Response GetByIdJson(RequestContext ctx)
        {
            var idParam = ctx.Request.RouteParams.Get("id");

            var item = _data.SingleOrDefault(x => x.Id == idParam);

            if (item == null)
            {
                return Response.Json(HttpStatusCodes.NotFound404, new
                {
                    error = $"No item exists with ID {idParam}",
                });
            }

            return Response.Json(HttpStatusCodes.Ok200, new
            {
                id = item.Id,
                name = item.Name,
            });
        }

        /// <summary>
        /// An example routed API action that retrieves detailed information for an example item by its ID, then returns it as JSON
        /// </summary>
        /// <param name="ctx">The request context</param>
        /// <returns>The response generated by the routed action</returns>
        [Route(HttpMethods.Get, Path = "{id}/details")]
        public static Response GetDetailsJson(RequestContext ctx)
        {
            var idParam = ctx.Request.RouteParams.Get("id");

            var item = _data.SingleOrDefault(x => x.Id == idParam);

            if (item == null)
            {
                return Response.Json(HttpStatusCodes.NotFound404, new
                {
                    error = $"No item exists with ID {idParam}",
                });
            }

            return Response.Json(HttpStatusCodes.Ok200, new
            {
                id = item.Id,
                name = item.Name,
                createdAtUtc = item.CreatedAtUtc,
                randomNumber = item.RandomNumber,
            });
        }

        /// <summary>
        /// An example routed API action that creates an item, then returns it as JSON
        /// </summary>
        /// <param name="ctx">The request context</param>
        /// <returns>The response generated by the routed action</returns>
        [Route(HttpMethods.Post)]
        public static Response PostAjax(RequestContext ctx)
        {
            var nameParam = ctx.Request.Body.Get("name") as string;
           
            if (string.IsNullOrWhiteSpace(nameParam))
            {
                return Response.Json(HttpStatusCodes.BadRequest400, new
                {
                    error = $"The name is required",
                });
            }

            if (_data.Any(x => x.Name.Trim().Equals(nameParam.Trim(), StringComparison.CurrentCultureIgnoreCase)))
            {
                return Response.Json(HttpStatusCodes.BadRequest400, new
                {
                    error = $"An item already exists with that name",
                });
            }

            var item = new ExampleItem { Name = nameParam.Trim() };

            _data.Add(item);

            // we can interact with the current client's session
            ctx.Session["ExampleItems_LastCreation"] = DateTime.UtcNow.ToString();

            return Response.Json(HttpStatusCodes.Created201, new
            {
                id = item.Id,
                name = item.Name,
            });
        }

        /// <summary>
        /// An example routed API action that deletes an item by its ID, then returns it as JSON
        /// </summary>
        /// <param name="ctx"></param>
        /// <returns></returns>
        [Route(HttpMethods.Delete, Path = "{id}")]
        public static Response DeleteAjax(RequestContext ctx)
        {
            var idParam = ctx.Request.RouteParams.Get("id");

            var item = _data.SingleOrDefault(x => x.Id == idParam);

            if (item == null)
            {
                return Response.Json(HttpStatusCodes.NotFound404, new
                {
                    error = $"No item exists with ID {idParam}",
                });
            }

            _data.Remove(item);

            return Response.Json(HttpStatusCodes.Ok200, new
            {
                id = item.Id,
            });
        }

        #endregion
    }
}
